plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.8'
}

configurations {
    shadowImplementation
    implementation.extendsFrom(shadowImplementation)
}

version = "${rootProject.version}"
group = "${rootProject.group}"

base {
    archivesName = 'opanel'
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "opanel" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    maven {
        url = uri("https://repo.codemc.io/repository/tetoe-mc")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}"
    include(modImplementation("space.nocp:configx:2.0.1"))

    shadowImplementation(project(":core")) {
        // To avoid conflict
        exclude group: 'com.github.oshi', module: 'oshi-core'
    }

    modImplementation "com.github.oshi:oshi-core:6.8.2"
}

shadowJar {
    configurations = [project.configurations.shadowImplementation]

    archiveBaseName = baseName +"-shadow"
    archiveClassifier = ''

    relocate 'com.google.gson', 'net.opanel.deps.gson'
    relocate 'org.objectweb.asm', 'net.opanel.deps.objectweb.asm'

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

remapJar {
    dependsOn shadowJar
    mustRunAfter shadowJar
    inputFile = shadowJar.archiveFile
    archiveBaseName = baseName +"-build"
    destinationDirectory = file "../build/libs"
}

tasks.named('processResources', ProcessResources) {
    var replaceProperties = [
            version: project.version,
            minecraft_version: minecraft_version,
            fabric_loader_version: fabric_loader_version
    ]
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties + [project: project]
    }
}

java {
    withSourcesJar()
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaLanguageVersion.of(21)
